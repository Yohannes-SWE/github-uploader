#!/bin/bash

# 🚀 GitHub Uploader Performance Testing Script

echo "🔍 Starting Performance Analysis..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Create performance report directory
mkdir -p reports

echo -e "${BLUE}📦 Building optimized version...${NC}"
cd client

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}📥 Installing dependencies...${NC}"
    npm install
fi

# Install performance analysis tools
echo -e "${YELLOW}🛠️ Installing analysis tools...${NC}"
npm install --save-dev webpack-bundle-analyzer

# Build with analysis
echo -e "${BLUE}🏗️ Building with bundle analysis...${NC}"
npm run build

# Check if build was successful
if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Build successful!${NC}"
else
    echo -e "${RED}❌ Build failed!${NC}"
    exit 1
fi

# Analyze bundle size
echo -e "${BLUE}📊 Analyzing bundle size...${NC}"
cd build/static/js
MAIN_JS=$(ls main.*.js | head -1)
MAIN_SIZE=$(du -h $MAIN_JS | cut -f1)
echo -e "${GREEN}📦 Main bundle size: ${MAIN_SIZE}${NC}"

# Get detailed file sizes
echo -e "\n${BLUE}📋 Detailed bundle analysis:${NC}"
ls -lh *.js | awk '{print $9 " - " $5}'

cd ../../..

# Check CSS size
echo -e "\n${BLUE}🎨 CSS Analysis:${NC}"
cd build/static/css
CSS_SIZE=$(du -h *.css | cut -f1)
echo -e "${GREEN}🎨 CSS bundle size: ${CSS_SIZE}${NC}"
cd ../../..

# Total build size
echo -e "\n${BLUE}📏 Total build size:${NC}"
BUILD_SIZE=$(du -h build | tail -1 | cut -f1)
echo -e "${GREEN}📁 Total build size: ${BUILD_SIZE}${NC}"

# Generate performance report
echo -e "\n${BLUE}📝 Generating performance report...${NC}"

cat > ../reports/performance-report.md << EOF
# 🚀 Performance Analysis Report
**Generated:** $(date)

## 📊 Build Analysis

### Bundle Sizes
- **Main JS**: ${MAIN_SIZE}
- **CSS**: ${CSS_SIZE}  
- **Total Build**: ${BUILD_SIZE}

### Optimization Status
- ✅ Code Splitting: Implemented
- ✅ Component Memoization: Implemented  
- ✅ Lazy Loading: Implemented
- ✅ Tree Shaking: Enabled
- ✅ GZip Compression: Enabled

### Performance Targets
| Metric | Target | Status |
|--------|--------|--------|
| Bundle Size | <100 kB | $(if [[ ${MAIN_SIZE%K*} -lt 100 ]]; then echo "✅ Met"; else echo "🟡 In Progress"; fi) |
| CSS Size | <4 kB | $(if [[ ${CSS_SIZE%K*} -lt 4 ]]; then echo "✅ Met"; else echo "🟡 In Progress"; fi) |
| Total Size | <110 kB | $(if [[ ${BUILD_SIZE%K*} -lt 110 ]]; then echo "✅ Met"; else echo "🟡 In Progress"; fi) |

## 🎯 Next Steps
1. Run Lighthouse audit: \`lighthouse http://localhost:3000\`
2. Test on 3G network simulation
3. Monitor Core Web Vitals
4. Set up performance budget in CI

## 📈 Recommendations
- Consider implementing Service Worker for caching
- Add image optimization with WebP format
- Implement virtual scrolling for large lists
- Add critical CSS inlining

**Report generated by performance testing script**
EOF

echo -e "${GREEN}✅ Performance report generated: reports/performance-report.md${NC}"

# Start development server for testing
echo -e "\n${BLUE}🌐 Starting development server for testing...${NC}"
echo -e "${YELLOW}💡 Open another terminal and run:${NC}"
echo -e "   ${BLUE}lighthouse http://localhost:3000${NC}"
echo -e "   ${BLUE}curl -w \"@../curl-format.txt\" -o /dev/null http://localhost:3000${NC}"

# Create curl timing format file
cat > ../curl-format.txt << 'EOF'
     time_namelookup:  %{time_namelookup}\n
        time_connect:  %{time_connect}\n
     time_appconnect:  %{time_appconnect}\n
    time_pretransfer:  %{time_pretransfer}\n
       time_redirect:  %{time_redirect}\n
  time_starttransfer:  %{time_starttransfer}\n
                     ----------\n
          time_total:  %{time_total}\n
EOF

echo -e "\n${GREEN}🎉 Performance analysis complete!${NC}"
echo -e "${BLUE}📊 Check the reports/ directory for detailed analysis${NC}"

cd .. 